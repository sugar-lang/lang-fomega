definition
module Fomega-Lexical

exports
  sorts VID TID MID NAT STRING Keyword PrimitiveType
    BlockComment CommentPart OpenBrace CloseBrace Dash

  lexical syntax
    [\ \t\r\n] -> LAYOUT

    "--" ~[\n]* [\n] -> LAYOUT

    BlockComment -> LAYOUT
    "{-" CommentPart* "-}" -> BlockComment
    ~[\{\-] -> CommentPart
    OpenBrace -> CommentPart
    CloseBrace -> CommentPart
    Dash -> CommentPart
    BlockComment -> CommentPart
    [\-] -> Dash
    [\{] -> OpenBrace
    [\}] -> CloseBrace

  lexical restrictions
    Dash -/- [\}]
    OpenBrace -/- [\-]

  context-free restrictions
    LAYOUT? -/- [\ \t\r\n]

  lexical syntax
    [a-z][A-Za-z0-9]* -> VID
    [A-Z][A-Za-z0-9]* -> TID
    [A-Z][A-Za-z0-9]* -> MID
    [0-9]+ -> NAT
    "\""~[\"\\\n\r]*"\"" -> STRING

    Keyword -> TID {reject}
    Keyword -> MID {reject}
    PrimitiveType -> TID {reject}

    "FORALL" -> Keyword
    "MU" -> Keyword
    "IF" -> Keyword
    "THEN" -> Keyword
	"ELSE" -> Keyword
	"CASE" -> Keyword
	"OF" -> Keyword
	"FOLD" -> Keyword
	"UNFOLD" -> Keyword
    "AS" -> Keyword
	"MODULE" -> Keyword
	"IMPORT" -> Keyword
	"QUALIFIED" -> Keyword
	"PUBLIC" -> Keyword
    "VAL" -> Keyword
	"TYPE" -> Keyword
	"TRUE" -> Keyword
	"FALSE" -> Keyword

    "Nat" -> PrimitiveType
    "Bool" -> PrimitiveType
    "String" -> PrimitiveType

  lexical restrictions
    TID -/- [A-Za-z0-9]
    VID -/- [A-Za-z0-9]
    MID -/- [A-Za-z0-9]
    NAT -/- [0-9]

    "IF" "THEN" "ELSE" "CASE" "OF" "FOLD" "UNFOLD"
    "AS" "MODULE" "IMPORT" "QUALIFIED" "PUBLIC" 
    "VAL" "TYPE" "TRUE" "FALSE" -/- [A-Za-z0-9]

    "Nat" "Bool" "String" -/- [A-Za-z0-9]
    

module Fomega-Type
imports Fomega-Lexical

exports
  sorts Type AtomicType TypeDecl Kind

  context-free syntax
    TID -> AtomicType {cons("TyVar")}
    "Nat" -> AtomicType {cons("TyNat")}
    "Bool" -> AtomicType {cons("TyBool")}
    "String" -> AtomicType {cons("TyString")}
    "{" {TypeDecl ","}* "}" -> AtomicType {cons("TyRecord")}
    "<" {TypeDecl ","}* ">" -> AtomicType {cons("TyVariant")}
	"(" Type ")" -> AtomicType {bracket}

    VID ":" Type -> TypeDecl {cons("TyDecl")}

    "*" -> Kind {cons("KiStar")}
    Kind "=>" Kind -> Kind {cons("KiArrow")}        

    AtomicType -> Type
    MID "." TID -> Type {cons("TyQVar")}

  context-free priorities
      Type Type -> Type {cons("TyApp"), left}
	> Type "**" {Type "**"}+ -> Type {cons("TyTuple"), right}
	> Type "->" Type -> Type {cons("TyArrow"), right}
	> {
      "FORALL" TID "::" Kind "." Type -> Type {cons("TyForall")}
	  "\\" TID "::" Kind "." Type -> Type {cons("TyAbs")}
	  "MU" TID "." Type -> Type {cons("TyMu")}
    }

module Fomega-Module
imports Fomega-Lexical
imports Fomega-Type
imports Fomega-Expr

exports
  sorts Module Def Import

  context-free syntax
    "MODULE" MID Import* Def* -> Module {cons("Module")}
    "IMPORT" Qualified? MID -> Import {cons("Import")}
    Public? "VAL" VID "=" Expr -> Def {cons("ValDef")}
    Public? "TYPE" TID "=" Type -> Def {cons("TypeDef")}
  
    "PUBLIC" -> Public {cons("Public")}
    "QUALIFIED" -> Qualified {cons("Qualified")}
    
  context-free start-symbols Module 


module Fomega-Expr
imports Fomega-Lexical
imports Fomega-Type

exports
  sorts Expr Field Branch

  context-free syntax
    VID -> Expr {cons("Var")}
	MID "." VID -> Expr {cons("QVar")}
    "(" Expr ")" -> Expr {bracket}
    "{" {Field ","}* "}" -> Expr {cons("Record")}
    "<" Field ">" -> Expr {cons("Variant")}
    "(" Expr "," {Expr ","}+ ")" -> Expr {cons("Tuple")}
    "TRUE" -> Expr {cons("True")}
    "FALSE" -> Expr {cons("False")}
    NAT -> Expr {cons("Nat")}
    STRING -> Expr {cons("String")}

    VID "=" Expr -> Field {cons("Field")}

    "<" VID "=" VID ">" "=>" Expr -> Branch {cons("Branch")}

  context-free priorities
    {
      Expr "." VID -> Expr {cons("SelectRcd")}
      Expr "." NAT -> Expr {cons("SelectTup")}
    }
    > {
      Expr Expr -> Expr {cons("App"), left}
      Expr "[" Type "]" -> Expr {cons("TApp")}
      "FOLD" "[" Type "]" Expr -> Expr {cons("Fold")}
      "UNFOLD" "[" Type "]" Expr -> Expr {cons("Unfold")}
    }
    > Expr "AS" Type -> Expr {cons("Ascription")}
    > { 
      "\\" VID ":" AtomicType "." Expr -> Expr {cons("Abs")}
      "\\" TID "::" Kind "." Expr -> Expr {cons("TAbs")}
	  "IF" Expr "THEN" Expr "ELSE" Expr -> Expr {cons("Cond")}
      "CASE" Expr "OF" {Branch ";"}+ -> Expr {cons("Case")}
    }

module org/sugarj/languages/Fomega
imports Fomega [
    BlockComment => FomegaBlockComment
    CommentPart => FomegaCommentPart
    OpenBrace => FomegaOpenBrace
    CloseBrace => FomegaCloseBrace
    Dash => FomegaDash
	MID => FomegaMID
	TID => FomegaTID
    VID => FomegaVID
    NAT => FomegaNAT
    STRING => FomegaSTRING
    Keyword => FomegaKeyword
    PrimitiveType => FomegaPrimitiveType    
    Type => FomegaType
    AtomicType => FomegaAtomicType
    TypeDecl => FomegaTypeDecl
    Kind => FomegaKind
    Module => FomegaModule
    Def => FomegaDef
    Import => FomegaImport
    Expr => FomegaExpr
    Field => FomegaField ]
